#!/bin/bash

set -eu

SCRIPT_PATH=$(readlink -f "$0")
BASEDIR=$(dirname "$SCRIPT_PATH")

. $BASEDIR/functions.sh

run_ees_ha=true

function usage {
  echo "\
Usage: $0 [options]

Installs EOS stack and configures eos services either on remote host or locally.

Target host is considered to be an EOS SaltStack master.

General options:
$base_options_usage
Options:
       --no-ha      skip running the ees_ha component
"
}

function options_parser {
    set -eu

    case "$1" in
        --no-ha)
            run_ees_ha=false
            ;;
        *)
            l_error "Unknown option: $1"
            usage
            exit 5
    esac
}

function run_states {
    local states=${@}

    # apply states
    if [[ "$singlenode" == true ]]; then
        # TODO use salt orchestration
        for state in ${states[@]}; do
            l_info "Applying 'components.$state'"
            $cmd salt eosnode-1 state.apply components.$state $salt_opts

            sleep 2     # Mindfulness break
        done
    else
        for state in ${states[@]}; do
            if [[ "$state" == "ha.corosync-pacemaker" ]]; then
                    # TODO: Remove this sequence dependency
                    #       Take the cluster start part out of the component config
                #       and do it as part of bootstra-eos script similar to the
                #       'hctl bootstrap' command

                # Execute on eosnode-2 to be followed on eosnode-1.
                l_info "Applying 'components.$state' for eosnode-2"
                $cmd salt eosnode-2 state.apply components.$state  $salt_opts
                sleep 2     # Mindfulness break
                l_info "Applying 'components.$state' for eosnode-1"
                $cmd salt eosnode-1 state.apply components.$state  $salt_opts
                sleep 2     # Mindfulness break
            elif [[ "$state" == "misc_pkgs.openldap" ]]; then
                # Execute on eosnode-2 to be followed on eosnode-1.
                l_info "Applying 'components.$state' for eosnode-2"
                $cmd salt eosnode-1 state.apply components.$state  $salt_opts
                sleep 2     # Mindfulness break
                l_info "Applying 'components.$state' for eosnode-1"
                $cmd salt eosnode-2 state.apply components.$state  $salt_opts
                sleep 2     # Mindfulness break
            else
                l_info "Applying 'components.$state' for both nodes"
                $cmd salt eosnode-[1,2] state.apply components.$state $salt_opts
                sleep 2     # Mindfulness break
            fi
        done

        # EES ha provisioning
        #l_info "Provision EES HA cluster"
        #for state in ees_ha; do
        #    l_info "Applying 'components.$state' for both nodes"
        #    $cmd salt eosnode-[1,2] state.apply components.$state $salt_opts
        #done
    fi
}


parse_args '' '' '' '' "$@"

if [[ "$verbosity" -ge 2 ]]; then
    set -x
fi

cmd="$(build_command "$hostspec" "$ssh_config" "$sudo" 2>/dev/null)"

salt_opts=
if [[ "$dry_run" == true ]]; then
    salt_opts="test=True"
fi

# Refresh salt pillar data
l_info "Updating salt pillar data"
$cmd salt "*" saltutil.refresh_pillar

if [ ! -e /opt/seagate/eos-prvsnr/generated_configs/*.lustre ]; then
    prereq_states=(
    # states to be applied in desired sequence
        "system"
        "misc_pkgs.rsyslog"
        "system.firewall"
        "system.logrotate"
        "system.ntp"
        # "system.mlnx_driver"
        "system.storage"
        "misc_pkgs.build_ssl_cert_rpms"
        "ha.corosync-pacemaker"
        "ha.haproxy"
        "misc_pkgs.elasticsearch"
        "misc_pkgs.kibana"
        "misc_pkgs.nodejs"
        "misc_pkgs.openldap"
        "misc_pkgs.rabbitmq"
        "misc_pkgs.statsd"
        "misc_pkgs.lustre"
    )
    run_states "${prereq_states[@]}"

    sleep 2

    # Reboot only if mellanox diver is installed
    # rpm -qi mlnx-ofed-all > /dev/null 2>&1 && {
    #     salt "eosnode-2" system.reboot --async
    #     salt "eosnode-1" system.reboot --async
    # }
    # sleep 2
fi

if [ ! -e /opt/seagate/eos-prvsnr/generated_configs/*.hare ]; then
    iopath_states=(
    # states to be applied in desired sequence
        "eoscore"
        "s3server"
        "hare"
    )
    run_states  "${iopath_states[@]}"
fi

if [ ! -e /opt/seagate/eos-prvsnr/generated_configs/*.ees_ha ]; then
    if [ $run_ees_ha == true ]; then
        run_states  "ha.ees_ha"
    fi
fi

if [ ! -e /opt/seagate/eos-prvsnr/generated_configs/*.csm ]; then
    controlpath_states=(
    # states to be applied in desired sequence
        "sspl"
        "csm"
    )
    run_states "${controlpath_states[@]}"
fi


l_info "Done"
