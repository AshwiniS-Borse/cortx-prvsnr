#!/bin/bash

set -euE

trap trap_handler ERR

SCRIPT_PATH=$(readlink -f "$0")
BASEDIR=$(dirname "$SCRIPT_PATH")

export LOG_FILE=/opt/seagate/cortx/eos-prvsnr/log/destroy-eos.log
mkdir -p $(dirname "${LOG_FILE}")
/usr/bin/true > ${LOG_FILE}

. $BASEDIR/functions.sh

function trap_handler {
  echo "For more details see $LOG_FILE"
} 

run_all=true
run_ha_states=false
io_states=false
ctrlpath_states=false
remove_prvsnr=false

ha_states=(
    "ha.ees_ha"
    "ha.corosync-pacemaker"
    "hare"
)

controlpath_states=(
# states to be applied in desired sequence
    "post_setup"
    "uds"
    "csm"
    "sspl"
)

iopath_states=(
# states to be applied in desired sequence
    "s3server"
    "eoscore"
    "misc_pkgs.lustre"
)

prereq_states=(
    # states to be applied in desired sequence
        "misc_pkgs.statsd"
        "misc_pkgs.kibana"
        "misc_pkgs.elasticsearch"
        "misc_pkgs.nodejs"
        "misc_pkgs.rabbitmq"
        "misc_pkgs.openldap"
        "ha.haproxy"
        "misc_pkgs.ssl_certs"
    )

system_states=(
    # states to be applied in desired sequence
        "system.storage"
        "system.ntp"
        "system.logrotate"
        "system.firewall"
        "misc_pkgs.rsyslog"
        "system.network.data.direct"
        "system.network"
        "system.storage.multipath"
        "system"
    )

function usage {
  echo "\
Usage: $0 [options]

Installs EOS stack and configures eos services either on remote host or locally.

Target host is considered to be an EOS SaltStack master.

General options:
$base_options_usage
Options:
       -S,  --singlenode               switch to single node mode setup
       --ha-states       run only teardown of ha components
       --iopath-states   run only teardown of iopath components
       --ctrlpath-states run only teardown of control path components
       --remove-prvsnr   run only teardown of control path components
"
}

function options_parser {
    set -eu

    case "$1" in
        -S|--singlenode)
            singlenode=true
            ;;
        --ha-states)
            run_ha_states=true
            run_all=false
            ;;
        --iopath-states)
            io_states=true
            run_all=false
            ;;
        --ctrlpath-states)
            ctrlpath_states=true
            run_all=false
            ;;
        --remove-prvsnr)
            remove_prvsnr=true
            run_all=false
            ;;
        *)
            l_error "Unknown option: $1"
            usage
            exit 5
    esac
}

function teardown_states {
    local states=${@}

    # apply states
    if [[ "$singlenode" == true ]]; then
        # TODO use salt orchestration
        for state in ${states[@]}; do
            if [[ "$state" == "ha.corosync-pacemaker"
                || "$state" == "ha.ees_ha"
                || "$state" == "post_setup"
                ]]; then
                l_info "HA state 'components.$state.teardown' not to be applied for single node setup"
            else
                l_info "Applying 'components.$state.teardown'"
                if [[ "$state" == "hare" ]]; then
                    l_info "Shutting down cluster"
                    hctl shutdown || true
                fi
                $cmd salt eosnode-1 state.apply components.$state.teardown $salt_opts || true
                sleep 2     # Mindfulness break
            fi
        done
    else
        for state in ${states[@]}; do
            if [[ "$state" == "ha.corosync-pacemaker" || "$state" == "sspl" ]]; then
                l_info "Applying 'components.$state.teardown' for eosnode-1"
                $cmd salt eosnode-1 state.apply components.$state.teardown  $salt_opts || true
                sleep 2     # Mindfulness break
                l_info "Applying 'components.$state.teardown' for eosnode-2"
                $cmd salt eosnode-2 state.apply components.$state.teardown  $salt_opts || true
                sleep 2     # Mindfulness break
            elif [[ "$state" == "misc_pkgs.openldap" || "$state" == "misc_pkgs.rabbitmq"
                    || "$state" == "system.storage.multipath" ]]; then
                l_info "Applying 'components.$state.teardown' for eosnode-2"
                $cmd salt eosnode-2 state.apply components.$state.teardown  $salt_opts || true
                sleep 2     # Mindfulness break
                l_info "Applying 'components.$state.teardown' for eosnode-1"
                $cmd salt eosnode-1 state.apply components.$state.teardown  $salt_opts || true
                sleep 2     # Mindfulness break
            else
                l_info "Applying 'components.$state.teardown' for both nodes"
                $cmd salt eosnode-[1,2] state.apply components.$state.teardown $salt_opts || true
                sleep 2     # Mindfulness break
            fi
        done
    fi
}


parse_args 'S' 'singlenode,ha-states,iopath-states,ctrlpath-states,remove-prvsnr' options_parser '' "$@"

if [[ "$verbosity" -ge 2 ]]; then
    set -x
fi

cmd="$(build_command "$hostspec" "$ssh_config" "$sudo" 2>/dev/null)"

salt_opts=
if [[ "$dry_run" == true ]]; then
    salt_opts="test=True"
fi

# Refresh salt pillar data
l_info "Updating salt pillar data"
$cmd salt "*" saltutil.refresh_pillar


if [[ "$run_all" == true ]]; then
    teardown_states "${controlpath_states[@]}"
    teardown_states "${ha_states[@]}"
    teardown_states "${iopath_states[@]}"
    teardown_states "${prereq_states[@]}"
fi

if [[ "$ctrlpath_states" == true ]]; then
    l_info "tearing down the control path states"
    teardown_states "${controlpath_states[@]}"
fi

if [[ "$run_ha_states" == true ]]; then
    l_info "tearing down the ha states"
    teardown_states "${ha_states[@]}"
fi

if [[ "$io_states" == true ]]; then
    l_info "tearing down the io path states"
    teardown_states  "${iopath_states[@]}"
fi

if [[ "$run_all" == true || "$run_ha_states" == true ]]; then
    l_info "Cleaning up the failed-services on both nodes"
    salt '*' cmd.run "systemctl reset-failed"

    l_info "Cleaning up the failed-services on both nodes"
    systemctl list-units --state=running | grep hare-consul-agent &&
        systemctl stop hare-consul-agent || true
    if [[ "$singlenode" != true ]]; then
        ssh eosnode-2 " systemctl list-units --state=running | grep\
            hare-consul-agent && systemctl stop hare-consul-agent" || true
    fi
fi

if [[ "$remove_prvsnr" == true ]]; then
    l_info "Cleaning up Provisioner"
    hostnamectl status | grep Chassis | grep -q server && {
        salt '*' cmd.run "/usr/sbin/partprobe /dev/disk/by-id/dm-name-mpath*" || true
    }
    l_info "Removing eos-prvsnr package from both nodes"
    salt '*' pkg.remove eos-prvsnr || true
    salt '*' file.absent  || true
    if [[ "$singlenode" != true ]]; then
        l_info "Removing prvsnr-cli and salt packages from node-2"
        ssh eosnode-2 "yum remove -y eos-prvsnr-cli; yum remove -y salt*; rm -rf /etc/salt; rm -rf /opt/seagate"
    fi
    l_info "Removing salt packages from node-1"
    yum remove -y salt* || true
    rm -rf /etc/salt; rm -rf /opt/seagate

    sleep 2
    l_info "Please run following command to complete the Operation:"
    echo "'yum remove -y eos-prvsnr-cli'"
fi

l_info "The detailed logs can be seen at: $LOG_FILE"
l_info "Done"
