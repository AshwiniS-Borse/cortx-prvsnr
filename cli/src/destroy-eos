#!/bin/bash

set -eu

SCRIPT_PATH=$(readlink -f "$0")
BASEDIR=$(dirname "$SCRIPT_PATH")

. $BASEDIR/functions.sh

run_ees_ha=true

function usage {
  echo "\
Usage: $0 [options]

Installs EOS stack and configures eos services either on remote host or locally.

Target host is considered to be an EOS SaltStack master.

General options:
$base_options_usage
Options:
       --no-ha      skip running the ees_ha component
"
}

function options_parser {
    set -eu

    case "$1" in
        --no-ha)
            run_ees_ha=false
            ;;
        *)
            l_error "Unknown option: $1"
            usage
            exit 5
    esac
}

function teardown_states {
    local states=${@}

    # apply states
    if [[ "$singlenode" == true ]]; then
        # TODO use salt orchestration
        for state in ${states[@]}; do
            l_info "Applying 'components.$state'.teardown"
            $cmd salt eosnode-1 state.apply components.$state.teardown $salt_opts || {
                true
            }
            sleep 2     # Mindfulness break
        done
    else
        for state in ${states[@]}; do
            if [[ "$state" == "ha.corosync-pacemaker" ]]; then
                l_info "Applying 'components.$state.teardown' for eosnode-1"
                $cmd salt eosnode-2 state.apply components.$state.teardown  $salt_opts || true
                sleep 2     # Mindfulness break
                l_info "Applying 'components.$state.teardown' for eosnode-2"
                $cmd salt eosnode-1 state.apply components.$state.teardown  $salt_opts || true
                sleep 2     # Mindfulness break
            else
                l_info "Applying 'components.$state.teardown' for both nodes"
                $cmd salt eosnode-[1,2] state.apply components.$state.teardown $salt_opts || true
                sleep 2     # Mindfulness break
            fi
        done
    fi
}


parse_args '' '' '' '' "$@"

if [[ "$verbosity" -ge 2 ]]; then
    set -x
fi

cmd="$(build_command "$hostspec" "$ssh_config" "$sudo" 2>/dev/null)"

salt_opts=
if [[ "$dry_run" == true ]]; then
    salt_opts="test=True"
fi

# Refresh salt pillar data
l_info "Updating salt pillar data"
$cmd salt "*" saltutil.refresh_pillar

ha_states=(
    "ha.ees_ha"
    "ha.corosync-pacemaker"
)
teardown_states "$(ha_states)"
controlpath_states=(
# states to be applied in desired sequence
    "csm"
    "sspl"
)
teardown_states "${controlpath_states[@]}"

iopath_states=(
# states to be applied in desired sequence
    "hare"
    "s3server"
    "eoscore"
    "misc_pkgs.lustre"
)
teardown_states  "${iopath_states[@]}"


prereq_states=(
# states to be applied in desired sequence
    "misc_pkgs.statsd"
    "misc_pkgs.rabbitmq"
    "misc_pkgs.openldap"
    "misc_pkgs.nodejs"
    "misc_pkgs.kibana"
    "misc_pkgs.elasticsearch"
    "ha.haproxy"
    "misc_pkgs.build_ssl_cert_rpms"
    "system.storage"
    "system.mlnx_driver"
    "system.ntp"
    "system.logrotate"
    "system.firewall"
    "misc_pkgs.rsyslog"
    "system"
)
teardown_states "${prereq_states[@]}"

sleep 2

l_info "Done"
